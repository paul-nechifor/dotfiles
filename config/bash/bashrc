export is_vagrant=$(if [[ "$(id -u vagrant 2>/dev/null)" ]]; then echo true; fi)
export is_linux=`if [[ "$OSTYPE" == "linux-gnu" ]]; then echo true; fi`
export is_freebsd=`if [[ "$OSTYPE" == "freebsd"* ]]; then echo true; fi`
if [[ $is_linux ]]; then
  export is_ubuntu=`if [[ $(grep Ubuntu /etc/issue) ]]; then echo true; fi`
  export is_centos=`if [[ $(grep CentOS /etc/issue) ]]; then echo true; fi`
fi
export own_computer=$(if [[ $is_ubuntu && ! $is_vagrant ]]; then echo true; fi)

# Bash settings ----------------------------------------------------------------

# Set vi mode.
set -o vi

# Clear even in insert mode.
bind -x '"\C-x":"clear"'
bind -x '"\e[A":"echo Stop using that."'

# bind '"\e[B":insert-last-argument' Map this to something.
bind '"\C-o":history-search-backward'
bind '"\e[B":history-search-forward'

bind 'set match-hidden-files off'

# Append to `~/.bash_history`.
shopt -s histappend

# Enable using '**' like in 'ack word **/*.py'.
shopt -s globstar 2>/dev/null

# Bash history controls.
export HISTSIZE=1000000
export HISTCONTROL=ignoreboth
export HISTFILESIZE=1000000000
export HISTTIMEFORMAT="%F %T"

# Bash prompt ------------------------------------------------------------------

PS1=
if [[ ! $own_computer ]]; then
  if [[ ! ( "`whoami`" =~ (p|pnechifor|vagrant|root) ) ]]; then
    if [[ `id -u` -eq 0 ]]; then
      PS1+='\[\e[0;35m\]\u@\[\e[0m\]'
    else
      PS1+='\[\e[0;34m\]\u@\[\e[0m\]'
    fi
  fi
  if [[ `id -u` -eq 0 ]]; then
    PS1+='\[\e[1;35m\]\h\[\e[0m\] '
  else
    PS1+='\[\e[1;34m\]\h\[\e[0m\] '
  fi
  if [[ `id -u` -eq 0 ]]; then
    PS1+='\[\e[0;35m\]\w\[\e[0m\] '
  else
    PS1+='\[\e[0;34m\]\w\[\e[0m\] '
  fi
  PS1+='\n'
fi
if [[ $own_computer ]]; then
  if [[ `id -u` -eq 0 ]]; then
    PS1+='\[\e[1;31m\]● \[\e[0m\] '
  else
    PS1+='\[\e[1;32m\]● \[\e[0m\] '
  fi
else
  if [[ `id -u` -eq 0 ]]; then
    PS1+='\[\e[1;35m\]● \[\e[0m\] '
  else
    PS1+='\[\e[1;34m\]● \[\e[0m\] '
  fi
fi

# Exports ----------------------------------------------------------------------

export LESS_TERMCAP_mb=$(printf "\e[1;37m")
export LESS_TERMCAP_md=$(printf "\e[1;37m")
export LESS_TERMCAP_me=$(printf "\e[0m")
export LESS_TERMCAP_se=$(printf "\e[0m")
export LESS_TERMCAP_so=$(printf "\e[1;47;30m")
export LESS_TERMCAP_ue=$(printf "\e[0m")
export LESS_TERMCAP_us=$(printf "\e[0;36m")

export JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64"
export EDITOR="vim"
export TERM="xterm-256color"
export PATH="$PATH:~/.pn-dotfiles/bin"

if [[ -d ~/.local-installs/bin ]]; then
  PATH="~/.local-installs/bin:$PATH"
fi

# File system management -------------------------------------------------------
if [[ $is_linux ]]; then
  alias ls="ls --color=auto"
  function l() {
    # h = human readable
    # l = list
    # G = no groups
    # tail -> remove 'total XXXk' line
    ls --color=always --group-directories-first -hlG --si "$@" |
    tail --lines=+2
  }
  alias la="l -A"
  if [[ $is_centos ]]; then
    alias tree="tree -Cvh --dirsfirst"
  else
    alias tree="tree -Cvh --du --dirsfirst"
  fi
  alias df="df -ah --si"
  alias du="du -h"
elif [[ $is_freebsd ]]; then
  alias l="ls -lhG"
  alias la="ls -lhaG"
  alias tree="tree -Cvh --dirsfirst"
  alias df="df -ah"
fi
alias du="du -h"

# Go to dir and list the contents.
d() {
  if [ $# -eq 0 ]; then
    cd && l
  else
    cd "$@" && l
  fi
}

# Create and go to a directory (possibly nested).
dc() {
  dir="$@"
  mkdir -p "$dir"
  cd "$dir"
}

alias d-="d -"
alias ..="d .."
alias ...="d ../.."
alias ....="d ../../.."
alias .....="d ../../../.."

if [[ ! `which ack` ]]; then
  alias ack="ack-grep"
fi

# Lazy aliases -----------------------------------------------------------------

alias p="pwd"
alias v="vim"

if [[ $own_computer ]]; then
  alias am="alsamixer"
  alias b="thunar . & >/dev/null 2>/dev/null"
  alias t="gnome-terminal & >/dev/null 2>/dev/null"
fi

if [[ $is_linux ]]; then
  alias egrep="egrep --color=auto"
  alias grep="grep --color=auto"
fi

alias super='sudo -sE'

# Complex aliases --------------------------------------------------------------

alias dt="du -ba| sort -n | tail -50"
alias xp="echo -n 'NAME, CLASS = '; xprop | grep 'WM_CLASS' | cut -c20-"

alias less="less -r"

# Reinstall the dotfiles from the repo.
alias infect="wget -q -O- https://github.com/paul-nechifor/dotfiles/raw/master/install.sh | bash -s - infect && . ~/.bashrc"

# Recursively reset all files in the current dir to 644 for normal and 755 for
# dirs.
alias resetmod="find . -type f -exec chmod 644 {} + ; find . -type d -exec chmod 755 {} +"

# Functions --------------------------------------------------------------------

dirdiff() {
  # -Ewb ignore the bulk of whitespace changes
  # -N detect new files
  # -u unified
  # -r recurse
  diff -ENwbur "$1" "$2"  | kompare -o -
}

mvninit() {
  id=$1
  mvn archetype:create -DgroupId=net.nechifor.$id -DartifactId=$id
}

texwc() {
  file="$1"
  texcount -total "$file" | grep 'Words in text' | sed 's/[^0-9]*//g'
}

if [[ $own_computer ]]; then
  sslenc() {
    file="$1"
    openssl enc -aes-256-cbc -salt -in $file -out $file.enc \
        -pass file:/home/p/pro/docs/keys/symkey256.bin
  }

  ssldec() {
    file="`basename $1 .enc`"
    openssl enc -d -aes-256-cbc -salt -in $file.enc -out $file \
        -pass file:/home/p/pro/docs/keys/symkey256.bin
  }
fi

# Git aliases and functions ----------------------------------------------------

alias g="git"
alias ga="g add --all"
alias gc="g c"
alias gca="g c --amend"
alias gd="g diff"
alias gdc="g diff --cached"
alias gad="ga && gdc"
alias gg="gitg"
alias gl="git-pretty-log"
alias gs="g s"

gac() {
  message="$@"
  git add --all
  git commit -m "$message"
}

# SVN aliases and functions ----------------------------------------------------

s() {
  case $1 in
    diff)
      svn "$@" | vim +'set bt=nowrite' - ;;
    log)
      svn "$@" --limit 40 | svn-pretty-log ;;
    st)
      svn info | grep 'URL' | awk '{print "url:", $NF}'
      svn "$@" 2>&1 | color-svn-status ;;
    add|checkout|co|cp|del|export|remove|rm)
      svn "$@" 2>&1 | color-svn-status ;;
    *)
      svn "$@" ;;
  esac
}

alias sa="s add"
alias sd="s diff"
alias sl="s log"
alias st="s st"
alias sup="sup"

color-svn-status() {
  local color
  while read -r line; do
    if [[ $line =~ ^\ ?M ]]; then color="\033[34m";
    elif [[ $line =~ ^\ ?C ]]; then color="\033[41m\033[37m\033[1m";
    elif [[ $line =~ ^A ]]; then color="\033[32m\033[1m";
    elif [[ $line =~ ^D ]]; then color="\033[31m\033[1m";
    elif [[ $line =~ ^X ]]; then color="\033[30m\033[1m";
    elif [[ $line =~ ^! ]]; then color="\033[43m\033[37m\033[1m";
    elif [[ $line =~ ^I ]]; then color="\033[33m";
    elif [[ $line =~ ^R ]]; then color="\033[35m";
    elif [[ $line =~ ^svn:\ E ]]; then color="\033[31m\033[1m";
    elif [[ $line =~ ^Performing ]]; then color="\033[30m\033[1m";
    else color=""
    fi
    echo -e "$color${line/\\/\\\\}\033[0m\033[0;0m"
  done
}

do-local() {
  (
    echo '>>>>>'
    cat
    echo '<<<<<'
  ) >> ~/.local-signal
}

remote-listen() {
  ssh "$1" tail -f .local-signal | execute-listen
}

execute-listen() {
  local cmd=
  while read -r line; do
    if [[ $line == '>>>>>' ]]; then
      cmd=
    elif [[ $line == '<<<<<' ]]; then
      echo =====================================
      echo "$cmd"
      echo -------------------------------------
      echo
      echo "$cmd" | bash
    else
      cmd+=$line
    fi
  done
}

# Load local bashrc ------------------------------------------------------------

if [ -f ~/.bashrc-local ]; then
  source ~/.bashrc-local
fi
