#!/usr/bin/env python

import os
import re
import subprocess
import sys

dirname = os.path.dirname(__file__)


class ColorSet(object):
    def __init__(self, colors):
        list = re.findall(r'[0-9a-fA-F]{6}', colors)
        self.background = '#' + list[0]
        self.foreground = '#' + list[1]
        self.colors = list[2:]
        self.palette = '#' + ':#'.join(self.colors)


ROOT = '/apps/gnome-terminal/profiles/Default/'
THEMES = {
    # These are based on Solarized but have black/white fg/bg.
    'black': ColorSet("""
        000000 FFFFFF
        000000 D31112 859900 B58900 268BD2 D33682 2AA198 EEE8D5
        204B56 FB2B16 859900 B58900 268BD2 D33682 2AA198 FDF6E3
    """),
    'white': ColorSet("""
        FFFFFF 000000
        FFFFFF D31112 859900 B58900 268BD2 D33682 2AA198 000000
        204B56 CB4B16 859900 B58900 268BD2 D33682 2AA198 111111
    """),

    # These are based on Solarized but have higher contrast.
    'solar': ColorSet("""
        002B36 657B83
        063642 D30102 859900 B58900 268BD2 D33682 2AA198 EEE8D5
        265662 CB4B16 859900 B58900 268BD2 D33682 2AA198 FDF6E3
    """),
    'solarlight': ColorSet("""
        FDF6E3 536466
        EEE8D5 D30102 859900 B58900 268BD2 D33682 2AA198 073642
        FDF6E3 CB4B16 859900 B58900 268BD2 D33682 2AA198 002B36
    """),

    # These are based on Gruvbox.
    'gruv': ColorSet("""
        1d2021 ebdbb2
        282828 cc241d 98971a d79921 458588 b16286 689d6a a89984
        928374 fb4934 b8bb26 fabd2f 83a598 d3869b 8ec07c ebdbb2
    """),
    'gruvlight': ColorSet("""
        ebdbb2 1d2021
        282828 cc241d 98971a d79921 458588 b16286 689d6a a89984
        928374 fb4934 b8bb26 fabd2f 83a598 d3869b 8ec07c ebdbb2
    """),

    'bleed': ColorSet("""
        d6005a 121f53
        83053a 850321 98971a d79921 458588 7122a6 689d6a a89984
        928374 fb4934 b8bb26 fabd2f 83a598 d3869b 8ec07c ebdbb2
    """),
}

reset_seq = '\033[0m'


def gconf_get(path):
    args = ['gconftool-2', '--get', path]
    process = subprocess.Popen(args, stdout=subprocess.PIPE)
    out, err = process.communicate()
    return out.strip()


def gconf_set(path, type, value):
    subprocess.call(['gconftool-2', '--set', path, '--type', type, value])


def set_theme(theme):
    gconf_set(ROOT + 'use_theme_background', 'bool', 'false')
    gconf_set(ROOT + 'use_theme_colors', 'bool', 'false')
    gconf_set(ROOT + 'background_color', 'string', theme.background)
    gconf_set(ROOT + 'foreground_color', 'string', theme.foreground)
    gconf_set(ROOT + 'palette', 'string', theme.palette)
    subprocess.call([
        dirname + '/gnome-terminal-theme',
        theme.background, theme.foreground, theme.palette,
    ])

    def trans_color(x):
        return x[0:2] + '/' + x[2: 4] + '/' + x[4:6]

    def trans_cols():
        yield 'background', trans_color(theme.background[1:])
        yield 'foreground', trans_color(theme.foreground[1:])
        for i, color in enumerate(theme.colors):
            yield 'color%s' % i, trans_color(color)

    f = 'XTerm*selectToClipboard: true\n'
    f += 'Xterm*Border: off\n'
    f += 'Xterm*none: on\n'
    f += 'Xterm*clientDecoration: none\n'
    f += '\n'.join('XTerm*%s: rgb:%s' % x for x in trans_cols())
    open(os.path.expanduser('~/.Xdefaults'), 'w').write(f)
    os.system('xrdb ~/.Xdefaults')


def set_font_size(size=16, relative=None):
    font = gconf_get(ROOT + 'font')
    if relative:
        size = int(re.match(r'.*?(\d+)$', font).group(1)) + relative
    if size < 10:
        size = 10
    if size > 32:
        size = 32
    font = re.sub(r'\d+$', str(size), font)
    gconf_set(ROOT + 'font', 'string', font)


def show_table():
    for i in range(2):
        for j in range(30, 38):
            sys.stdout.write(
                '\33[%d;%dm%d;%d\33[m ' % (i, j, i, j)
            )
            for k in range(40, 48):
                sys.stdout.write(
                    '\33[%d;%d;%dm%d;%d;%d\33[m ' % (i, j, k, i, j, k)
                )
            sys.stdout.write("\n")


def hrun(start, width, pad=0):
    return [None] * pad + list(range(start, start + width)) + [None] * pad


def vrun(start, width, height, padding=0):
    return [hrun(s, width, padding)
            for s in range(start, start + width * height, width)]


def color_bar(seq, color, trail):
    if color is None:
        return '%s    %s' % (reset_seq, trail)
    return '%s %03d%s' % (seq(color), color, trail)


# Adapted from from https://gist.github.com/mgedmin/2762225 .
def show_all_colors():
    layout = [
        vrun(0, 8, 2),                # 16 standard xterm colors
        vrun(16, 6, 6 * 6, 1),        # 6x6x6 color cube
        vrun(16 + 6 * 6 * 6, 8, 3),   # 24 grey levels
    ]

    def bg_seq(color):
        return '\033[48;5;%dm' % color

    def fg_seq(color):
        return '\033[38;5;%dm' % color

    for block in layout:
        print("")
        for row in block:
            fg_bar = ''.join(color_bar(fg_seq, color, '') for color in row)
            bg_bar = ''.join(color_bar(bg_seq, color, ' ') for color in row)
            print('%s%s    %s%s' % (fg_bar, reset_seq, bg_bar, reset_seq))


def main():
    arg = sys.argv[1]
    if re.match(r'^\d+$', arg):
        set_font_size(int(arg))
    elif re.match(r'^(-+|\++)$', arg):
        size = len(arg) * -1 if arg[0] == '-' else 1
        set_font_size(relative=size)
    elif re.match(r'^[-+]\d+$', arg):
        set_font_size(relative=int(arg))
    elif re.match(r'^table$', arg):
        show_table()
    elif re.match(r'^all$', arg):
        show_all_colors()
    else:
        if arg not in THEMES:
            themes = [''] + list(sorted(THEMES.keys()))
            print 'All the themes are:', '\n  - '.join(themes)
            exit(1)
        set_theme(THEMES[arg])


if __name__ == '__main__':
    main()
